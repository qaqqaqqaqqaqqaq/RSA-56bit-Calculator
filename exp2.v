
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module exp2(
	//CLOCK_50,
	LEDG,
	LEDR,

	//////////// GPIO, GPIO connect to GPIO Default //////////
	GPIO,

	//////////// HSMC, HSMC connect to HTG - HSMC to PIO Adaptor //////////
	HSMC_RX_n,
	HSMC_RX_p,
	HSMC_TX_n,
	HSMC_TX_p 
);

//=======================================================
//  PORT declarations
//=======================================================

output		     [8:0]		LEDG;
output		    [17:0]		LEDR;

//////////// GPIO, GPIO connect to GPIO Default //////////
inout 		    [35:0]		GPIO;

//////////// HSMC, HSMC connect to HTG - HSMC to PIO Adaptor //////////
inout reg 		    [16:0]		HSMC_RX_n;
inout reg 		    [16:0]		HSMC_RX_p;
inout reg		    [16:0]		HSMC_TX_n;
inout reg		    [16:0]		HSMC_TX_p;


//=======================================================
//  REG/WIRE declarations
//=======================================================

wire reset=GPIO[0];
wire we=GPIO[1];
wire oe=GPIO[2];
wire start=GPIO[3];
wire [1:0]reg_sel=GPIO[11:10];
wire [4:0]addr=GPIO[8:4];
reg [7:0]data_i;//=GPIO[19:12];
wire clk=GPIO[35];
wire finish;
wire [2:0]state;
reg ready;  
reg ready_next;
reg [7:0]data_o;
reg [255:0]a1,a1_next,a2,a2_next,a3,a3_next;
reg [255:0] a [3:0];
reg [255:0] a0,a0_next;
reg evt;
reg [8:0] next;
wire [255:0] a0_temp;
wire [2:0] phase;
wire [2:0]debug;

always @(clk) begin
HSMC_RX_n[16]=(cc == a[1]);/*256'hde4e32a576a3ffa6b74cce926e0e44197c8110d8bece6e7c74666567c754b9d9)*/;//reset;//0
HSMC_RX_p[16]=we;//1
HSMC_RX_n[15]=oe;//2
HSMC_RX_p[15]=start;//3
HSMC_RX_n[14]=addr[0];//4
HSMC_RX_p[14]=addr[1];//5
HSMC_RX_n[13]=addr[2];//6
HSMC_TX_n[16]=addr[3];//7
HSMC_TX_p[16]=addr[4];//8
HSMC_TX_p[15]=reg_sel[0];//10
HSMC_TX_n[14]=reg_sel[1];//11
HSMC_TX_p[14]=GPIO[12];//12
HSMC_RX_p[13]=GPIO[13];//13
HSMC_RX_n[12]=GPIO[14];//14
HSMC_RX_p[12]=GPIO[15];//15
HSMC_RX_n[11]=GPIO[16];//16
HSMC_TX_n[13]=GPIO[17];//17
HSMC_RX_p[11]=GPIO[18];//18
HSMC_TX_p[13]=GPIO[19];//19
HSMC_RX_n[10]=clk;//20
HSMC_TX_n[12]=debug[0];//ready21
HSMC_RX_n[7]=data_o[0];//22
HSMC_RX_p[7]=data_o[1];//23
HSMC_TX_n[7]=data_o[2];//24
HSMC_RX_n[6]=data_o[3];//25
HSMC_TX_p[7]=data_o[4];//26
HSMC_RX_p[6]=data_o[5];//27
HSMC_TX_n[6]=data_o[6];//28
HSMC_RX_n[5]=data_o[7];//29
HSMC_TX_p[6]= x;//30
HSMC_RX_p[3]= ~finish;//extended
HSMC_TX_p[2] = phase[0];//32
HSMC_TX_n[1] = phase[1];//33
HSMC_TX_p[1] = phase[2];//34
HSMC_TX_p[0] = debug[1];//31
HSMC_RX_n[4] = debug[2];//35
end

wire [255:0] cc,aa;
wire x;
ME m0(a[1],a[2],a[3],a0_temp,clk,~start,finish,phase,debug,cc);
//always @(*) begin data_o = a0_temp; end

wire [7:0]add = addr<<3;

always @ (posedge clk) begin
		if (!reset) begin
			ready <= 1'b0;
			a [1] <= 1'b0;
			a [2] <= 1'b0;
			a [3] <= 1'b0;
		end
		
		else if (we == 1'b0 && reset ==1'b1) begin
			a[reg_sel][add +: 8] <= GPIO[19:12];
		end
		else begin end
		ready <= ready_next;
		a0 <= a0_next;
end

always @(*) begin
	if (reset==0) begin
		ready_next = 1'b0;
		a0_next = 1'b0;
	end
	else if((ready==1'b0)&&(start==1'b0)&&(reset==1'b1))begin
		ready_next =1'b1;
		a0_next = a0;
	end
	else if((ready==1'b1)&&(finish==1'b1)&&(reset==1'b1))begin
		a0_next = a0_temp;
		ready_next = 1'b0;
	end
	else begin
		ready_next=ready;
		a0_next = a0;
	end
end

// read
always @ (*) begin
	if((oe==0)) begin
		data_o = a0[add +: 8];
	end
	else begin
		data_o = 1'b0;
	end
end
endmodule
